worker_processes auto;

events {

    worker_connections 1024;
}

http {

    # Setup nodeinfo cachine
    proxy_cache_path /var/cache/nginx/nodeinfo levels=1:2 keys_zone=nodeinfo_cache:10m max_size=10m inactive=1h use_temp_path=off;

   map $remote_addr $bypass_cache {
        default 0;
        ~^(172\.16\.|172\.19\.) 1;
    }	

    # Get real ip from Cloudflare headers, needed for rate-limiting
    set_real_ip_from 172.16.0.0/16;
    set_real_ip_from 172.19.0.0/16;
    real_ip_header CF-Connecting-IP;

    upstream lemmy {
        # this needs to map to the lemmy (server) docker service hostname
        server "lemdroid-lemmy.flycast";
    }
    upstream lemmy-ui {
        # this needs to map to the lemmy-ui docker service hostname
        server "lemdroid-lemmy-ui.flycast";
    }
    upstream photon-ui {
        server "lemdroid-photon-ui.flycast";
    }

      # A/B testing for frontend deployment
#     split_clients "${remote_addr}${http_user_agent}" $frontend {
#         50%     lemmy-ui;
#         *       photon-ui;
#     }

    # We construct a string consistent of the "request method" and "http accept header"
    # and then apply some ~simply regexp matches to that combination to decide on the
    # HTTP upstream we should proxy the request to.
    #
    # Example strings:
    #
    #   "GET:application/activity+json"
    #   "GET:text/html"
    #   "POST:application/activity+json"
    #
    # You can see some basic match tests in this regex101 matching this configuration
    # https://regex101.com/r/vwMJNc/1
    #
    # Learn more about nginx maps here http://nginx.org/en/docs/http/ngx_http_map_module.html
    map "$request_method:$http_accept" $proxpass {

        # If no explicit matches exists below, send traffic to the frontend
        # default $frontend;
        default photon-ui;

        # GET/HEAD requests that accepts ActivityPub or Linked Data JSON should go to lemmy.
        #
        # These requests are used by Mastodon and other fediverse instances to look up profile information,
        # discover site information and so on.
        "~^(?:GET|HEAD):.*?application\/(?:activity|ld)\+json" "lemmy";

        # All non-GET/HEAD requests should go to lemmy
        #
        # Rather than calling out POST, PUT, DELETE, PATCH, CONNECT and all the verbs manually
        # we simply negate the GET|HEAD pattern from above and accept all possibly $http_accept values
        "~^(?!(GET|HEAD)).*:" "lemmy";
    }

    server {
        listen 80;
        server_name lemdro.id;
        server_tokens off;

        gzip on;
        gzip_types text/css application/javascript image/svg+xml;
        gzip_vary on;

        # Upload limit, relevant for pictrs
        client_max_body_size 20M;

        add_header X-Frame-Options SAMEORIGIN;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";

        # frontend general requests
        location / {
            proxy_pass http://$proxpass;

            proxy_buffer_size   128k;
            proxy_buffers   4 256k;
            proxy_busy_buffers_size   256k;

            rewrite ^(.+)/+$ $1 permanent;
            # Send actual client IP upstream
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # backend
        location ~ ^/(api|pictrs|feeds|nodeinfo|.well-known) {

            proxy_pass "http://lemmy";
            # proxy common stuff
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # Send actual client IP upstream
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # nginx up check
        location /nginx_alive_check {

            return 200;
        }

        location = /nodeinfo/2.0.json {
        
            proxy_cache nodeinfo_cache;
            proxy_cache_valid 200 1h;
            proxy_cache_bypass $bypass_cache;
            proxy_cache_use_stale updating error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_cache_lock on;

            proxy_pass "http://lemmy";
            # proxy common stuff
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # Send actual client IP upstream
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}

